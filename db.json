{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/HexoCommand.md","hash":"567b9ae0b7a8dfc1093fdeee5076b4627e574cd1","modified":1496821776000},{"_id":"source/_posts/dotNetCoreIdentityResearch.md","hash":"420358c23a612bce790a5f38292342b141d2e454","modified":1496821776000},{"_id":"public/2017/05/23/HexoCommand/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087456},{"_id":"public/2017/06/07/dotNetCoreIdentityResearch/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087457},{"_id":"public/categories/Net-Core/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087457},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087458},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087458},{"_id":"public/tags/hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087458},{"_id":"public/tags/Net-Core/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087458},{"_id":"public/tags/Identity/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087459},{"_id":"public/tags/Authentication/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496822087459}],"Category":[{"name":".Net Core","_id":"cj3mp828l00047xzcfqa24vt3"}],"Data":[],"Page":[],"Post":[{"title":"Hexo 常用指令","date":"2017-05-23T04:17:32.000Z","_content":"\n參考來源:\n[Hexo command](https://hexo.io/zh-tw/docs/commands.html)\n\n## 網站\n\n### 發佈或佈署網站\n```cli\nhexo deploy\n```\n-g, --generate\t部署網站前先產生靜態檔案\n\n\n### 產生靜態檔案\n```cli\nhexo generate\n```\n\n### 本機運行\n```cli\nhexo server\n```\n-p, --port\t覆蓋連接埠設定\n-s, --static\t只使用靜態檔案\n-l, --log\t啟動記錄器，或覆蓋記錄格式\n\n## 文章\n參考來源:\n[Hexo Writing](https://hexo.io/zh-tw/docs/writing.html)\n\n### 新文章\n```cli\nhexo new [layout] <title>\n```\n`[layout]`: post(source/_posts), page(source), draft(source/_drafts)\n\n### 發佈草稿\n```\nhexo publish [layout] <title>\n```","source":"_posts/HexoCommand.md","raw":"---\ntitle: Hexo 常用指令\ntags: hexo\ndate: 2017-05-23 12:17:32\n---\n\n參考來源:\n[Hexo command](https://hexo.io/zh-tw/docs/commands.html)\n\n## 網站\n\n### 發佈或佈署網站\n```cli\nhexo deploy\n```\n-g, --generate\t部署網站前先產生靜態檔案\n\n\n### 產生靜態檔案\n```cli\nhexo generate\n```\n\n### 本機運行\n```cli\nhexo server\n```\n-p, --port\t覆蓋連接埠設定\n-s, --static\t只使用靜態檔案\n-l, --log\t啟動記錄器，或覆蓋記錄格式\n\n## 文章\n參考來源:\n[Hexo Writing](https://hexo.io/zh-tw/docs/writing.html)\n\n### 新文章\n```cli\nhexo new [layout] <title>\n```\n`[layout]`: post(source/_posts), page(source), draft(source/_drafts)\n\n### 發佈草稿\n```\nhexo publish [layout] <title>\n```","slug":"HexoCommand","published":1,"updated":"2017-06-07T07:49:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mp827u00007xzcbqvf9z53","content":"<p>參考來源:<br><a href=\"https://hexo.io/zh-tw/docs/commands.html\" target=\"_blank\" rel=\"external\">Hexo command</a></p>\n<h2 id=\"網站\"><a href=\"#網站\" class=\"headerlink\" title=\"網站\"></a>網站</h2><h3 id=\"發佈或佈署網站\"><a href=\"#發佈或佈署網站\" class=\"headerlink\" title=\"發佈或佈署網站\"></a>發佈或佈署網站</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>-g, –generate    部署網站前先產生靜態檔案</p>\n<h3 id=\"產生靜態檔案\"><a href=\"#產生靜態檔案\" class=\"headerlink\" title=\"產生靜態檔案\"></a>產生靜態檔案</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<h3 id=\"本機運行\"><a href=\"#本機運行\" class=\"headerlink\" title=\"本機運行\"></a>本機運行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<p>-p, –port    覆蓋連接埠設定<br>-s, –static    只使用靜態檔案<br>-l, –log    啟動記錄器，或覆蓋記錄格式</p>\n<h2 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h2><p>參考來源:<br><a href=\"https://hexo.io/zh-tw/docs/writing.html\" target=\"_blank\" rel=\"external\">Hexo Writing</a></p>\n<h3 id=\"新文章\"><a href=\"#新文章\" class=\"headerlink\" title=\"新文章\"></a>新文章</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p><code>[layout]</code>: post(source/_posts), page(source), draft(source/_drafts)</p>\n<h3 id=\"發佈草稿\"><a href=\"#發佈草稿\" class=\"headerlink\" title=\"發佈草稿\"></a>發佈草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>參考來源:<br><a href=\"https://hexo.io/zh-tw/docs/commands.html\">Hexo command</a></p>\n<h2 id=\"網站\"><a href=\"#網站\" class=\"headerlink\" title=\"網站\"></a>網站</h2><h3 id=\"發佈或佈署網站\"><a href=\"#發佈或佈署網站\" class=\"headerlink\" title=\"發佈或佈署網站\"></a>發佈或佈署網站</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>-g, –generate    部署網站前先產生靜態檔案</p>\n<h3 id=\"產生靜態檔案\"><a href=\"#產生靜態檔案\" class=\"headerlink\" title=\"產生靜態檔案\"></a>產生靜態檔案</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<h3 id=\"本機運行\"><a href=\"#本機運行\" class=\"headerlink\" title=\"本機運行\"></a>本機運行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<p>-p, –port    覆蓋連接埠設定<br>-s, –static    只使用靜態檔案<br>-l, –log    啟動記錄器，或覆蓋記錄格式</p>\n<h2 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h2><p>參考來源:<br><a href=\"https://hexo.io/zh-tw/docs/writing.html\">Hexo Writing</a></p>\n<h3 id=\"新文章\"><a href=\"#新文章\" class=\"headerlink\" title=\"新文章\"></a>新文章</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p><code>[layout]</code>: post(source/_posts), page(source), draft(source/_drafts)</p>\n<h3 id=\"發佈草稿\"><a href=\"#發佈草稿\" class=\"headerlink\" title=\"發佈草稿\"></a>發佈草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure>"},{"title":"ASP.NET Core Identity、Authentication資源搜集","date":"2017-06-07T07:47:05.000Z","_content":"\n\n# ASP.NET Core 的 Identity與Authentication 資源搜集\n\n最近團隊計畫要從 ASP.NET 4.5 轉移到 ASP.NET Core，預先研究身份驗證與授權的相關文章，把讀過的資源整理起來方便之後查找。\n\n## 官方文件 ([連結](https://docs.microsoft.com/en-us/aspnet/core/security))\n在官方文件的 Security 章節裡([連結](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/))，有提到關於Authentication(驗證)與Authorization(授權)的作法，其中關於Authentication的作法大約分成下列幾種方式:\n1. OSS Authentication Providers (OSS驗證)\n1. 使用 AspNetCore Identity EntityFrameworkCore\n1. 啟動 Facebook, Google 或其他驗證機制\n1. 透過簡訊的兩步驟驗證\n1. 使用Cookie Middleware而不使用ASP.NET Core Identity ([連結](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie))\n1. 使用Azure Active Directory (Azure AD)\n1. 使用 IdentityServer4\n\n基於上述的「5」，大約需要在 `Startup.cs` 的 `Configure` 方法中 `app.UseMVC()` 前加入下述程式:\n```c#\nusing Microsoft.AspNetCore.Authentication.Cookies;\n\nnamespace WebApplicationBasic\n{\n    public class Startup\n    {\n      public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n      {\n\n        app.UseCookieAuthentication(new CookieAuthenticationOptions()\n            {\n              AuthenticationScheme = \"CoreMVCCookieMiddlewareInstance\",\n              // AuthenticationScheme - this is a value by which the middleware is known. This is useful when there are multiple instances of middleware and you want to limit authorization to one instance.\n\n              LoginPath = new PathString(\"/Account/Unauthorized/\"),\n              // 當使用者未驗證時會重新轉導的路徑\n\n              AccessDeniedPath = new PathString(\"/Account/Forbidden/\"),\n              // 當使用者沒有使用權限時的轉導路徑\n\n              AutomaticAuthenticate = true,\n              // 在每次的 Requet(請求)前運行，嚐試驗證與重畫任何序列化主體\n\n              AutomaticChallenge = true\n              // 當授權失效時，Middleware會重新轉導到LoginPath或AccessDeniedPath\n            });\n\n        app.UseMVC();\n      }\n    }\n}\n\n```\n\n使用者登入時，呼叫SignInAsync 並傳入設定好的 `ClaimsPrincipal` Object\n```c#\nawait HttpContext.Authentication.SignInAsync(\"MyCookieMiddlewareInstance\", principal);\n```\n使用者登出時，呼叫SignOutAsync\n```c#\nawait HttpContext.Authentication.SignOutAsync(\"MyCookieMiddlewareInstance\");\n```\n\n\n官方文件讀到這裡，我\b對 `ClaimsPrincipal` 與 `ClaimsIdentity` 產生疑問，所以順著找又找到下列的說明與文章。\n\n## ClaimsIdentity 與 ClaimsPrincipal\n簡單來說 ClaimsIdentity 指的是驗證的方法，例如: 帳號密碼、手機簡訊或Windows驗證等。\nClaimsPrincipal 則是指驗證的主體，也就是請求驗證的使用者。\n在 ClaimsPrincipal 中有一個屬性為`IEnumerable<ClaimsIdentity> Identities`，這表示一個使用者可以有多種的驗證方式(驗證的方法)，來向 Server 證明自己是當事人。\n\n## 非官方文件\n下面列出在閱讀官方文件後，找到的補充資料。\n\n### 英文\n1. 解釋 ClaimsPrincipal 與 ClaimsIdentity間的關聯 by Andrew Lock ([連結](https://andrewlock.net/introduction-to-authentication-with-asp-net-core/))\n1. Exploring the cookie authentication middleware in ASP.NET Core. by Andrew Lock ([連結](https://andrewlock.net/exploring-the-cookieauthenticationmiddleware-in-asp-net-core/))\n\n\n### 中文\n這裡列出四篇「杨晓东」的文章，用比較簡單的例子來說明Identity。\n作者的網站裡還有很多ASP.NET Core的文章，就不一一例舉了。\n1. ASP.NET Core 之 Identity 入门（一）([連結](http://www.cnblogs.com/savorboard/p/aspnetcore-identity.html))\n1. ASP.NET Core 之 Identity 入门（二）([連結](http://www.cnblogs.com/savorboard/p/aspnetcore-identity2.html))\n1. ASP.NET Core 之 Identity 入门（三）([連結](http://www.cnblogs.com/savorboard/p/aspnetcore-identity3.html))\n1. ASP.NET Core 中的那些认证中间件及一些重要知识点([連結](http://www.cnblogs.com/savorboard/p/aspnetcore-authentication.html))\n\n## 小結\n目前看完這些資料後，尚未實作，先釐清Identity、Authentication與Authorization三者間的差異。\n之後實後再回來補充資料。\b","source":"_posts/dotNetCoreIdentityResearch.md","raw":"---\ntitle: ASP.NET Core Identity、Authentication資源搜集\ntags:\n  - .Net Core\n  - Identity\n  - Authentication\ncategories:\n  - .Net Core\ndate: 2017-06-07 15:47:05\n---\n\n\n# ASP.NET Core 的 Identity與Authentication 資源搜集\n\n最近團隊計畫要從 ASP.NET 4.5 轉移到 ASP.NET Core，預先研究身份驗證與授權的相關文章，把讀過的資源整理起來方便之後查找。\n\n## 官方文件 ([連結](https://docs.microsoft.com/en-us/aspnet/core/security))\n在官方文件的 Security 章節裡([連結](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/))，有提到關於Authentication(驗證)與Authorization(授權)的作法，其中關於Authentication的作法大約分成下列幾種方式:\n1. OSS Authentication Providers (OSS驗證)\n1. 使用 AspNetCore Identity EntityFrameworkCore\n1. 啟動 Facebook, Google 或其他驗證機制\n1. 透過簡訊的兩步驟驗證\n1. 使用Cookie Middleware而不使用ASP.NET Core Identity ([連結](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie))\n1. 使用Azure Active Directory (Azure AD)\n1. 使用 IdentityServer4\n\n基於上述的「5」，大約需要在 `Startup.cs` 的 `Configure` 方法中 `app.UseMVC()` 前加入下述程式:\n```c#\nusing Microsoft.AspNetCore.Authentication.Cookies;\n\nnamespace WebApplicationBasic\n{\n    public class Startup\n    {\n      public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n      {\n\n        app.UseCookieAuthentication(new CookieAuthenticationOptions()\n            {\n              AuthenticationScheme = \"CoreMVCCookieMiddlewareInstance\",\n              // AuthenticationScheme - this is a value by which the middleware is known. This is useful when there are multiple instances of middleware and you want to limit authorization to one instance.\n\n              LoginPath = new PathString(\"/Account/Unauthorized/\"),\n              // 當使用者未驗證時會重新轉導的路徑\n\n              AccessDeniedPath = new PathString(\"/Account/Forbidden/\"),\n              // 當使用者沒有使用權限時的轉導路徑\n\n              AutomaticAuthenticate = true,\n              // 在每次的 Requet(請求)前運行，嚐試驗證與重畫任何序列化主體\n\n              AutomaticChallenge = true\n              // 當授權失效時，Middleware會重新轉導到LoginPath或AccessDeniedPath\n            });\n\n        app.UseMVC();\n      }\n    }\n}\n\n```\n\n使用者登入時，呼叫SignInAsync 並傳入設定好的 `ClaimsPrincipal` Object\n```c#\nawait HttpContext.Authentication.SignInAsync(\"MyCookieMiddlewareInstance\", principal);\n```\n使用者登出時，呼叫SignOutAsync\n```c#\nawait HttpContext.Authentication.SignOutAsync(\"MyCookieMiddlewareInstance\");\n```\n\n\n官方文件讀到這裡，我\b對 `ClaimsPrincipal` 與 `ClaimsIdentity` 產生疑問，所以順著找又找到下列的說明與文章。\n\n## ClaimsIdentity 與 ClaimsPrincipal\n簡單來說 ClaimsIdentity 指的是驗證的方法，例如: 帳號密碼、手機簡訊或Windows驗證等。\nClaimsPrincipal 則是指驗證的主體，也就是請求驗證的使用者。\n在 ClaimsPrincipal 中有一個屬性為`IEnumerable<ClaimsIdentity> Identities`，這表示一個使用者可以有多種的驗證方式(驗證的方法)，來向 Server 證明自己是當事人。\n\n## 非官方文件\n下面列出在閱讀官方文件後，找到的補充資料。\n\n### 英文\n1. 解釋 ClaimsPrincipal 與 ClaimsIdentity間的關聯 by Andrew Lock ([連結](https://andrewlock.net/introduction-to-authentication-with-asp-net-core/))\n1. Exploring the cookie authentication middleware in ASP.NET Core. by Andrew Lock ([連結](https://andrewlock.net/exploring-the-cookieauthenticationmiddleware-in-asp-net-core/))\n\n\n### 中文\n這裡列出四篇「杨晓东」的文章，用比較簡單的例子來說明Identity。\n作者的網站裡還有很多ASP.NET Core的文章，就不一一例舉了。\n1. ASP.NET Core 之 Identity 入门（一）([連結](http://www.cnblogs.com/savorboard/p/aspnetcore-identity.html))\n1. ASP.NET Core 之 Identity 入门（二）([連結](http://www.cnblogs.com/savorboard/p/aspnetcore-identity2.html))\n1. ASP.NET Core 之 Identity 入门（三）([連結](http://www.cnblogs.com/savorboard/p/aspnetcore-identity3.html))\n1. ASP.NET Core 中的那些认证中间件及一些重要知识点([連結](http://www.cnblogs.com/savorboard/p/aspnetcore-authentication.html))\n\n## 小結\n目前看完這些資料後，尚未實作，先釐清Identity、Authentication與Authorization三者間的差異。\n之後實後再回來補充資料。\b","slug":"dotNetCoreIdentityResearch","published":1,"updated":"2017-06-07T07:49:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mp828b00037xzciamxf958","content":"<h1 id=\"ASP-NET-Core-的-Identity與Authentication-資源搜集\"><a href=\"#ASP-NET-Core-的-Identity與Authentication-資源搜集\" class=\"headerlink\" title=\"ASP.NET Core 的 Identity與Authentication 資源搜集\"></a>ASP.NET Core 的 Identity與Authentication 資源搜集</h1><p>最近團隊計畫要從 ASP.NET 4.5 轉移到 ASP.NET Core，預先研究身份驗證與授權的相關文章，把讀過的資源整理起來方便之後查找。</p>\n<h2 id=\"官方文件-連結\"><a href=\"#官方文件-連結\" class=\"headerlink\" title=\"官方文件 (連結)\"></a>官方文件 (<a href=\"https://docs.microsoft.com/en-us/aspnet/core/security\" target=\"_blank\" rel=\"external\">連結</a>)</h2><p>在官方文件的 Security 章節裡(<a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authentication/\" target=\"_blank\" rel=\"external\">連結</a>)，有提到關於Authentication(驗證)與Authorization(授權)的作法，其中關於Authentication的作法大約分成下列幾種方式:</p>\n<ol>\n<li>OSS Authentication Providers (OSS驗證)</li>\n<li>使用 AspNetCore Identity EntityFrameworkCore</li>\n<li>啟動 Facebook, Google 或其他驗證機制</li>\n<li>透過簡訊的兩步驟驗證</li>\n<li>使用Cookie Middleware而不使用ASP.NET Core Identity (<a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie\" target=\"_blank\" rel=\"external\">連結</a>)</li>\n<li>使用Azure Active Directory (Azure AD)</li>\n<li>使用 IdentityServer4</li>\n</ol>\n<p>基於上述的「5」，大約需要在 <code>Startup.cs</code> 的 <code>Configure</code> 方法中 <code>app.UseMVC()</code> 前加入下述程式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">using Microsoft.AspNetCore.Authentication.Cookies;</div><div class=\"line\"></div><div class=\"line\">namespace WebApplicationBasic</div><div class=\"line\">&#123;</div><div class=\"line\">    public class Startup</div><div class=\"line\">    &#123;</div><div class=\"line\">      public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">        app.UseCookieAuthentication(new CookieAuthenticationOptions()</div><div class=\"line\">            &#123;</div><div class=\"line\">              AuthenticationScheme = &quot;CoreMVCCookieMiddlewareInstance&quot;,</div><div class=\"line\">              // AuthenticationScheme - this is a value by which the middleware is known. This is useful when there are multiple instances of middleware and you want to limit authorization to one instance.</div><div class=\"line\"></div><div class=\"line\">              LoginPath = new PathString(&quot;/Account/Unauthorized/&quot;),</div><div class=\"line\">              // 當使用者未驗證時會重新轉導的路徑</div><div class=\"line\"></div><div class=\"line\">              AccessDeniedPath = new PathString(&quot;/Account/Forbidden/&quot;),</div><div class=\"line\">              // 當使用者沒有使用權限時的轉導路徑</div><div class=\"line\"></div><div class=\"line\">              AutomaticAuthenticate = true,</div><div class=\"line\">              // 在每次的 Requet(請求)前運行，嚐試驗證與重畫任何序列化主體</div><div class=\"line\"></div><div class=\"line\">              AutomaticChallenge = true</div><div class=\"line\">              // 當授權失效時，Middleware會重新轉導到LoginPath或AccessDeniedPath</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">        app.UseMVC();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用者登入時，呼叫SignInAsync 並傳入設定好的 <code>ClaimsPrincipal</code> Object<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">await HttpContext.Authentication.SignInAsync(&quot;MyCookieMiddlewareInstance&quot;, principal);</div></pre></td></tr></table></figure></p>\n<p>使用者登出時，呼叫SignOutAsync<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">await HttpContext.Authentication.SignOutAsync(&quot;MyCookieMiddlewareInstance&quot;);</div></pre></td></tr></table></figure></p>\n<p>官方文件讀到這裡，我\b對 <code>ClaimsPrincipal</code> 與 <code>ClaimsIdentity</code> 產生疑問，所以順著找又找到下列的說明與文章。</p>\n<h2 id=\"ClaimsIdentity-與-ClaimsPrincipal\"><a href=\"#ClaimsIdentity-與-ClaimsPrincipal\" class=\"headerlink\" title=\"ClaimsIdentity 與 ClaimsPrincipal\"></a>ClaimsIdentity 與 ClaimsPrincipal</h2><p>簡單來說 ClaimsIdentity 指的是驗證的方法，例如: 帳號密碼、手機簡訊或Windows驗證等。<br>ClaimsPrincipal 則是指驗證的主體，也就是請求驗證的使用者。<br>在 ClaimsPrincipal 中有一個屬性為<code>IEnumerable&lt;ClaimsIdentity&gt; Identities</code>，這表示一個使用者可以有多種的驗證方式(驗證的方法)，來向 Server 證明自己是當事人。</p>\n<h2 id=\"非官方文件\"><a href=\"#非官方文件\" class=\"headerlink\" title=\"非官方文件\"></a>非官方文件</h2><p>下面列出在閱讀官方文件後，找到的補充資料。</p>\n<h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><ol>\n<li>解釋 ClaimsPrincipal 與 ClaimsIdentity間的關聯 by Andrew Lock (<a href=\"https://andrewlock.net/introduction-to-authentication-with-asp-net-core/\" target=\"_blank\" rel=\"external\">連結</a>)</li>\n<li>Exploring the cookie authentication middleware in ASP.NET Core. by Andrew Lock (<a href=\"https://andrewlock.net/exploring-the-cookieauthenticationmiddleware-in-asp-net-core/\" target=\"_blank\" rel=\"external\">連結</a>)</li>\n</ol>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>這裡列出四篇「杨晓东」的文章，用比較簡單的例子來說明Identity。<br>作者的網站裡還有很多ASP.NET Core的文章，就不一一例舉了。</p>\n<ol>\n<li>ASP.NET Core 之 Identity 入门（一）(<a href=\"http://www.cnblogs.com/savorboard/p/aspnetcore-identity.html\" target=\"_blank\" rel=\"external\">連結</a>)</li>\n<li>ASP.NET Core 之 Identity 入门（二）(<a href=\"http://www.cnblogs.com/savorboard/p/aspnetcore-identity2.html\" target=\"_blank\" rel=\"external\">連結</a>)</li>\n<li>ASP.NET Core 之 Identity 入门（三）(<a href=\"http://www.cnblogs.com/savorboard/p/aspnetcore-identity3.html\" target=\"_blank\" rel=\"external\">連結</a>)</li>\n<li>ASP.NET Core 中的那些认证中间件及一些重要知识点(<a href=\"http://www.cnblogs.com/savorboard/p/aspnetcore-authentication.html\" target=\"_blank\" rel=\"external\">連結</a>)</li>\n</ol>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>目前看完這些資料後，尚未實作，先釐清Identity、Authentication與Authorization三者間的差異。<br>之後實後再回來補充資料。\b</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ASP-NET-Core-的-Identity與Authentication-資源搜集\"><a href=\"#ASP-NET-Core-的-Identity與Authentication-資源搜集\" class=\"headerlink\" title=\"ASP.NET Core 的 Identity與Authentication 資源搜集\"></a>ASP.NET Core 的 Identity與Authentication 資源搜集</h1><p>最近團隊計畫要從 ASP.NET 4.5 轉移到 ASP.NET Core，預先研究身份驗證與授權的相關文章，把讀過的資源整理起來方便之後查找。</p>\n<h2 id=\"官方文件-連結\"><a href=\"#官方文件-連結\" class=\"headerlink\" title=\"官方文件 (連結)\"></a>官方文件 (<a href=\"https://docs.microsoft.com/en-us/aspnet/core/security\">連結</a>)</h2><p>在官方文件的 Security 章節裡(<a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authentication/\">連結</a>)，有提到關於Authentication(驗證)與Authorization(授權)的作法，其中關於Authentication的作法大約分成下列幾種方式:</p>\n<ol>\n<li>OSS Authentication Providers (OSS驗證)</li>\n<li>使用 AspNetCore Identity EntityFrameworkCore</li>\n<li>啟動 Facebook, Google 或其他驗證機制</li>\n<li>透過簡訊的兩步驟驗證</li>\n<li>使用Cookie Middleware而不使用ASP.NET Core Identity (<a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie\">連結</a>)</li>\n<li>使用Azure Active Directory (Azure AD)</li>\n<li>使用 IdentityServer4</li>\n</ol>\n<p>基於上述的「5」，大約需要在 <code>Startup.cs</code> 的 <code>Configure</code> 方法中 <code>app.UseMVC()</code> 前加入下述程式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">using Microsoft.AspNetCore.Authentication.Cookies;</div><div class=\"line\"></div><div class=\"line\">namespace WebApplicationBasic</div><div class=\"line\">&#123;</div><div class=\"line\">    public class Startup</div><div class=\"line\">    &#123;</div><div class=\"line\">      public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">        app.UseCookieAuthentication(new CookieAuthenticationOptions()</div><div class=\"line\">            &#123;</div><div class=\"line\">              AuthenticationScheme = &quot;CoreMVCCookieMiddlewareInstance&quot;,</div><div class=\"line\">              // AuthenticationScheme - this is a value by which the middleware is known. This is useful when there are multiple instances of middleware and you want to limit authorization to one instance.</div><div class=\"line\"></div><div class=\"line\">              LoginPath = new PathString(&quot;/Account/Unauthorized/&quot;),</div><div class=\"line\">              // 當使用者未驗證時會重新轉導的路徑</div><div class=\"line\"></div><div class=\"line\">              AccessDeniedPath = new PathString(&quot;/Account/Forbidden/&quot;),</div><div class=\"line\">              // 當使用者沒有使用權限時的轉導路徑</div><div class=\"line\"></div><div class=\"line\">              AutomaticAuthenticate = true,</div><div class=\"line\">              // 在每次的 Requet(請求)前運行，嚐試驗證與重畫任何序列化主體</div><div class=\"line\"></div><div class=\"line\">              AutomaticChallenge = true</div><div class=\"line\">              // 當授權失效時，Middleware會重新轉導到LoginPath或AccessDeniedPath</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">        app.UseMVC();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用者登入時，呼叫SignInAsync 並傳入設定好的 <code>ClaimsPrincipal</code> Object<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">await HttpContext.Authentication.SignInAsync(&quot;MyCookieMiddlewareInstance&quot;, principal);</div></pre></td></tr></table></figure></p>\n<p>使用者登出時，呼叫SignOutAsync<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">await HttpContext.Authentication.SignOutAsync(&quot;MyCookieMiddlewareInstance&quot;);</div></pre></td></tr></table></figure></p>\n<p>官方文件讀到這裡，我\b對 <code>ClaimsPrincipal</code> 與 <code>ClaimsIdentity</code> 產生疑問，所以順著找又找到下列的說明與文章。</p>\n<h2 id=\"ClaimsIdentity-與-ClaimsPrincipal\"><a href=\"#ClaimsIdentity-與-ClaimsPrincipal\" class=\"headerlink\" title=\"ClaimsIdentity 與 ClaimsPrincipal\"></a>ClaimsIdentity 與 ClaimsPrincipal</h2><p>簡單來說 ClaimsIdentity 指的是驗證的方法，例如: 帳號密碼、手機簡訊或Windows驗證等。<br>ClaimsPrincipal 則是指驗證的主體，也就是請求驗證的使用者。<br>在 ClaimsPrincipal 中有一個屬性為<code>IEnumerable&lt;ClaimsIdentity&gt; Identities</code>，這表示一個使用者可以有多種的驗證方式(驗證的方法)，來向 Server 證明自己是當事人。</p>\n<h2 id=\"非官方文件\"><a href=\"#非官方文件\" class=\"headerlink\" title=\"非官方文件\"></a>非官方文件</h2><p>下面列出在閱讀官方文件後，找到的補充資料。</p>\n<h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><ol>\n<li>解釋 ClaimsPrincipal 與 ClaimsIdentity間的關聯 by Andrew Lock (<a href=\"https://andrewlock.net/introduction-to-authentication-with-asp-net-core/\">連結</a>)</li>\n<li>Exploring the cookie authentication middleware in ASP.NET Core. by Andrew Lock (<a href=\"https://andrewlock.net/exploring-the-cookieauthenticationmiddleware-in-asp-net-core/\">連結</a>)</li>\n</ol>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>這裡列出四篇「杨晓东」的文章，用比較簡單的例子來說明Identity。<br>作者的網站裡還有很多ASP.NET Core的文章，就不一一例舉了。</p>\n<ol>\n<li>ASP.NET Core 之 Identity 入门（一）(<a href=\"http://www.cnblogs.com/savorboard/p/aspnetcore-identity.html\">連結</a>)</li>\n<li>ASP.NET Core 之 Identity 入门（二）(<a href=\"http://www.cnblogs.com/savorboard/p/aspnetcore-identity2.html\">連結</a>)</li>\n<li>ASP.NET Core 之 Identity 入门（三）(<a href=\"http://www.cnblogs.com/savorboard/p/aspnetcore-identity3.html\">連結</a>)</li>\n<li>ASP.NET Core 中的那些认证中间件及一些重要知识点(<a href=\"http://www.cnblogs.com/savorboard/p/aspnetcore-authentication.html\">連結</a>)</li>\n</ol>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>目前看完這些資料後，尚未實作，先釐清Identity、Authentication與Authorization三者間的差異。<br>之後實後再回來補充資料。\b</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3mp828b00037xzciamxf958","category_id":"cj3mp828l00047xzcfqa24vt3","_id":"cj3mp828p00077xzc380vem1k"}],"PostTag":[{"post_id":"cj3mp827u00007xzcbqvf9z53","tag_id":"cj3mp828500017xzceszprbbo","_id":"cj3mp828900027xzcjizqlxjt"},{"post_id":"cj3mp828b00037xzciamxf958","tag_id":"cj3mp828m00057xzcejkvt7as","_id":"cj3mp828r00097xzcu0fvmd02"},{"post_id":"cj3mp828b00037xzciamxf958","tag_id":"cj3mp828n00067xzc5oei050x","_id":"cj3mp828s000a7xzcnwzm4i2o"},{"post_id":"cj3mp828b00037xzciamxf958","tag_id":"cj3mp828p00087xzc7dc96s7c","_id":"cj3mp828t000b7xzcu1794l35"}],"Tag":[{"name":"hexo","_id":"cj3mp828500017xzceszprbbo"},{"name":".Net Core","_id":"cj3mp828m00057xzcejkvt7as"},{"name":"Identity","_id":"cj3mp828n00067xzc5oei050x"},{"name":"Authentication","_id":"cj3mp828p00087xzc7dc96s7c"}]}}